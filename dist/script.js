"use strict";const clickPreventDefault=(e,t)=>{e.addEventListener("click",e=>(e.preventDefault(),t(e)))},click=(e,t)=>{e.addEventListener("click",e=>t(e))},menuButton=document.querySelector(".menu-toggler"),menu=document.querySelector(".menu-wrapper"),showMenu=()=>{menu.classList.toggle("visible")};menuButton.addEventListener("click",e=>{showMenu()});const documentSections=document.querySelectorAll('*[id^="section"], #projects'),documentSectionsArray=[...documentSections],scrollToSection=e=>{documentSectionsArray[e].scrollIntoView({bahavior:"smooth"})},dots=document.querySelectorAll(".menu-dots__item"),changeActiveDot=e=>{dots.forEach(e=>{e.classList.remove("active")}),dots[e].classList.add("active")},menuItems=document.querySelectorAll(".menu__list-item a");menuItems.forEach((e,t)=>{clickPreventDefault(e,()=>{scrollToSection(t),showMenu(),changeActiveDot(t)})}),dots.forEach((e,t)=>{clickPreventDefault(e,()=>{scrollToSection(t),changeActiveDot(t)})});const isInViewport=e=>e.getBoundingClientRect().top<=0,main=document.querySelector("#main");main.addEventListener("scroll",()=>{documentSections.forEach((e,t)=>{!0===isInViewport(e)&&void 0!==isInViewport(e)&&changeActiveDot(t)})});
let elements=[];const loadedPaths=()=>window.addEventListener("load",(function(){const e=[...document.getElementById("animated-logo").contentDocument.querySelectorAll("path")];anime({targets:e,strokeDashoffset:[anime.setDashoffset,0],easing:"easeInOutCubic",duration:2e3,delay:200,direction:"alternate",loop:!1})}));window.addEventListener("load",(function(){const e=[...document.getElementById("animated-logo").contentDocument.querySelectorAll("path")];anime({targets:e,strokeDashoffset:[anime.setDashoffset,0],easing:"easeInOutCubic",duration:2e3,delay:200,direction:"alternate",loop:!1})}));const techIconsTl=anime.timeline({targets:".technologies-icon",delay:anime.stagger(750),duration:1e3,easing:"easeOutExpo",loop:!0});techIconsTl.add({opacity:0}).add({opacity:1}).add({opacity:0}).add({opacity:1});const sections=[...document.querySelectorAll("section")],options={rootMargin:"0px",threshold:.25},callback=(e,t)=>{e.forEach(e=>{const{target:t}=e;e.intersectionRatio>=options.threshold&&t.classList.add("is-visible")})},observer=new IntersectionObserver(callback,options);sections.forEach((e,t)=>{observer.observe(e)});
